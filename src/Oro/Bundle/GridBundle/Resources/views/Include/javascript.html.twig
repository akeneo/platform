{{ oro_filter_render_header_javascript() }}

{% set datagrid = datagridView.datagrid %}
{% set form     = datagridView.formView %}

<script type="text/javascript">
{% set idSuffix = random() %}
{% set templateElId = datagrid.name ~ '-datagrid-template-' ~ idSuffix %}
{% set filtersElId = datagrid.name ~ '-datagrid-filters-' ~ idSuffix %}
{% set bodyElId = datagrid.name ~ '-datagrid-body-' ~ idSuffix %}

{% set columnTypePrefix = 'Oro\\Bundle\\GridBundle\\Field\\FieldDescriptionInterface::' %}
{% set actionTypePrefix = 'Oro\\Bundle\\GridBundle\\Action\\ActionInterface::' %}
{% set parameterTypePrefix = 'Oro\\Bundle\\GridBundle\\Datagrid\\ParametersInterface::' %}

{% set datagridParameters = datagrid.parameters.toArray() %}
{% set currentDatagridParameters = [] %}
{% if datagrid.name in datagridParameters|keys %}
{% set currentDatagridParameters = datagridParameters[datagrid.name] %}
{% endif %}

{% set parametersSorterType = constant(parameterTypePrefix ~ 'SORT_PARAMETERS') %}
{% set parametersFilterType = constant(parameterTypePrefix ~ 'FILTER_PARAMETERS') %}
{% set parametersAdditionalType = constant(parameterTypePrefix ~ 'ADDITIONAL_PARAMETERS') %}
{% set additionalParametersViewKey = constant('Oro\\Bundle\\GridBundle\\Datagrid\\Views\\AbstractViewsList::PARAM_KEY') %}

{% set sorterData = [] %}
{% if parametersSorterType in currentDatagridParameters|keys %}
{% set sorterData = currentDatagridParameters[parametersSorterType] %}
{% endif %}

{% set filterData = [] %}
{% if parametersFilterType in currentDatagridParameters|keys %}
{% set filterData = currentDatagridParameters[parametersFilterType] %}
{% endif %}

{% set viewsData = [] %}
{% set currentView = '' %}
{% if datagrid.viewsList %}
    {% if currentDatagridParameters[parametersAdditionalType][additionalParametersViewKey] is defined %}
        {% set currentView = currentDatagridParameters[parametersAdditionalType][additionalParametersViewKey] %}
    {% endif %}
    {% set viewsData = datagrid.viewsList.toViewData() %}
{% endif %}

{% set entityHint = datagrid.entityHint ? datagrid.entityHint : 'records' %}

{% set dataGridCollectionState = {
        currentPage:  datagrid.pager.page,
        pageSize: datagrid.pager.maxPerPage,
        totalRecords: datagrid.pager.nbResults,
        filters: filterData|default({}),
        sorters: sorterData|default({}),
        gridView: currentView|default({})
    }
%}

require(['jquery', 'underscore', 'backbone', 'oro/mediator', 'oro/grid/registry', 'oro/loading-mask',
    'oro/grid/grid', 'oro/grid/router', 'oro/pageable-collection', 'oro/grid/filter-list',
    'oro/grid/date-cell', 'oro/grid/datetime-cell', 'oro/grid/number-cell', 'oro/grid/boolean-cell',
    'oro/grid/html-cell', 'oro/grid/select-cell', 'oro/grid/string-cell',
    'oro/grid/delete-action', 'oro/grid/navigate-action', 'oro/grid/mass-action',
    'oro/datafilter/choice-filter', 'oro/datafilter/number-filter', 'oro/datafilter/date-filter',
    'oro/datafilter/datetime-filter', 'oro/datafilter/select-filter', 'oro/datafilter/multiselect-filter',
    'oro/datafilter/select-row-filter', 'oro/grid/ajax-action', 'oro/grid/grid-views/view'],
    function($, _, Backbone, mediator, registry, LoadingMask,
             Grid, GridRouter, PageableCollection, FilterList,
             DateCell, DateTimeCell, NumberCell, BooleanCell,
             HtmlCell, SelectCell, StringCell,
             DeleteAction, NavigateAction, MassAction,
             ChoiceFilter, NumberFilter, DateFilter,
             DatetimeFilter, SelectFilter, MultiselectFilter,
             SelectRowFilter, AjaxAction, GridViewsView
    ) {
        var datagridOptions = {
            grid: {
                name: {{ datagrid.name|json_encode|raw }},
                columns: [
                    {% for column in datagrid.columns %}
                    {
                        name: {{ column.name|json_encode|raw }},
                        label: {{ column.label|json_encode|raw }},
                        renderable: {{ column.shown|json_encode|raw }},
                        sortable: {{ column.sortable|json_encode|raw }},
                        editable: {{ column.editable|json_encode|raw }},
                        {% if column.type == constant(columnTypePrefix ~ 'TYPE_DATE') %}
                            cell: DateCell,
                        {% elseif column.type == constant(columnTypePrefix ~ 'TYPE_DATETIME') %}
                            cell: DateTimeCell,
                        {% elseif column.type == constant(columnTypePrefix ~ 'TYPE_DECIMAL') %}
                            cell: NumberCell.extend({ style: 'decimal' })
                        {% elseif column.type == constant(columnTypePrefix ~ 'TYPE_INTEGER') %}
                            cell: NumberCell.extend({ style: 'integer' })
                        {% elseif column.type == constant(columnTypePrefix ~ 'TYPE_PERCENT') %}
                            cell: NumberCell.extend({ style: 'percent' })
                        {% elseif column.type == constant(columnTypePrefix ~ 'TYPE_BOOLEAN') %}
                            cell: BooleanCell,
                            width: 10
                        {% elseif column.type == constant(columnTypePrefix ~ 'TYPE_HTML') %}
                            cell: HtmlCell
                        {% elseif column.type == constant(columnTypePrefix ~ 'TYPE_OPTIONS') and column.getOption('choices') %}
                            cell: SelectCell.extend({
                                choices: {{ column.getOption('choices')|json_encode|raw }}
                            })
                        {% else %}
                            cell: StringCell
                        {% endif %}
                    }{% if not loop.last %},{% endif %}
                    {% endfor %}
                ],
                filters: {
                    {% for filter in datagrid.filters %}
                    {{ filter.name|json_encode|raw }} : {{ oro_filter_render_filter_javascript(form.children[filter.name]) }}
                    {% if not loop.last %},{% endif %}
                    {% endfor %}
                },
                rowActions: {
                    {% for action in datagrid.rowActions %}
                        {{ action.name|json_encode|raw }}:
                        {% set currentOptions = action.options %}
                        {% if action.type == constant(actionTypePrefix ~ 'TYPE_DELETE') %}
                            {% set currentOptions = currentOptions|merge({'name': action.name}) %}
                            DeleteAction.extend({{ currentOptions|json_encode|raw }})
                        {% elseif action.type == constant(actionTypePrefix ~ 'TYPE_AJAX') %}
                            {% set currentOptions = currentOptions|merge({'name': action.name}) %}
                            AjaxAction.extend({{ currentOptions|json_encode|raw }})
                        {% else %}
                            {# merge additional options to navigateAction to use execute method #}
                            {% set currentOptions = currentOptions|merge({'name': action.name, 'launcherOptions': {'onClickReturnValue': false, 'runAction': true, 'className': 'no-hash'}}) %}
                            NavigateAction.extend({{ currentOptions|json_encode|raw }})
                        {% endif %}
                        {% if not loop.last %},{% endif %}
                    {% endfor %}
                },
                massActions: {
                    {% for action in datagrid.massActions %}
                        {{ action.name|json_encode|raw }}: MassAction.extend({{ action.options|json_encode|raw }})
                        {% if not loop.last %},{% endif %}
                    {% endfor %}
                },
                entityHint : {{ datagrid.entityHint|capitalize|json_encode|raw }},
                noDataHint : {{ 'oro_grid.no_data_hint %entityHint%'|trans({'%entityHint%': entityHint})|json_encode|raw }},
                noResultsHint : {{ 'oro_grid.not_found_hint %entityHint%'|trans({'%entityHint%': entityHint})|json_encode|raw }},
                toolbarOptions: {{ datagrid.toolbarOptions|json_encode|raw }},
                multipleSorting: {{ datagrid.multipleSorting|json_encode|raw }}
            },
            collection: {
                inputName: {{ datagrid.name|json_encode|raw }},
                url: {{ datagrid.routeGenerator.generateUrl(null, {'_format': 'json'})|json_encode|raw }},
                state: {{ dataGridCollectionState|json_encode|raw }}
            },
            results: {{ oro_grid_render_results_json(datagridView) }}
        };

        var containerSelector = {{ selector|json_encode|raw }};
        var datagridTemplateSelector = {{ ("#" ~ templateElId)|json_encode|raw }};
        var datagridFiltersSelector = {{ ("#" ~ filtersElId)|json_encode|raw }};
        var datagridBodySelector = {{ ("#" ~ bodyElId)|json_encode|raw }};
        var datagridGridViewsSelector = '.page-title > .navbar-extra .span9:last';

        var initDatagrid = function(
            datagridOptions,
            datagridTemplateSelector,
            containerSelector,
            datagridFiltersSelector,
            datagridBodySelector,
            datagridGridViewsSelector
        ) {
            var datagridCollection = {};
            // Initialize grid collection
            datagridCollection.collection = new PageableCollection(
                    datagridOptions.results,
                    _.extend({parse: true}, datagridOptions.collection)
            );
            mediator.trigger("datagrid_collection_set_after", datagridCollection);
            // Basic grid layout
            var template = _.template($(datagridTemplateSelector).html());
            $(containerSelector).append(template);

            // Grid
            var datagridParameters = _.extend({
                collection: datagridCollection.collection,
                loadingMask: LoadingMask.extend({
                    loadingHint: {{ 'oro_grid.label_loading_mask'|trans|json_encode|raw }}
                })
            }, datagridOptions.grid);
            var datagrid = new Grid(datagridParameters);
            $(datagridBodySelector).html(datagrid.render().$el);
            var datagridName = {{ datagrid.name|json_encode|raw }};
            registry.setElement('datagrid', datagridName, datagrid);
            mediator.trigger("datagrid:created:" + datagridName, datagrid);

            {# @TODO Filter should not know anything about collection. #}
            {% for filter in datagrid.filters if filter.needCollection is defined and filter.needCollection %}
                datagridOptions.grid.filters.{{ filter.name }}.collection = datagridCollection.collection;
            {% endfor %}

            // Title
            var titleParameters = _.extend({
                tagName: 'div',
                className: 'navigation container-fluid'
            }, datagridOptions.grid);

            // Filters
            var filterListParameters = _.extend({
                addButtonHint: {{ 'oro_grid.label_add_filter'|trans|json_encode|raw }},
                collection: datagridCollection.collection
            }, datagridOptions.grid);
            var filtersList = new FilterList(filterListParameters);

            $(datagridFiltersSelector).html(filtersList.render().$el);
            /** @event datagrid_filters:initialized */
            mediator.trigger("datagrid_filters:rendered", datagridCollection.collection);
            {% if (datagrid.pager.nbResults == 0) %}
                filtersList.$el.hide();
            {% endif %}

            var gridViewsPanel = new GridViewsView(_.extend({}, { collection: datagridCollection.collection }, {{ viewsData|json_encode|raw }}));
            $(datagridGridViewsSelector).append(gridViewsPanel.render().$el);

            {# Don't use router when grid is embedded in dialog #}
            {% if app.request.get('_widgetContainer') != 'dialog' %}
                // Register router and start history
                var router = new GridRouter({
                    collection: datagridCollection.collection
                });
            {% endif %}
        };

        initDatagrid(
            datagridOptions,
            datagridTemplateSelector,
            containerSelector,
            datagridFiltersSelector,
            datagridBodySelector,
            datagridGridViewsSelector
        );

        if (!Backbone.History.started) {
            Backbone.history.start();
        }
    }
);
</script>

<script type="text/template" id="{{ templateElId }}">
    <div class="clearfix" id="{{ filtersElId }}"></div>
    <div class="clearfix" id="{{ bodyElId }}"></div>
</script>
